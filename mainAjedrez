//Proyecto integrador, torneo de Ajedrez
//Ricardo Ruiz Cano     A01707233

#include <iostream>
#include <vector>
#include <ctime>  // Uso srand y rand para la inicialización de números aleatorios
#include "torneo.h"

using namespace std;

int main() {
    srand(time(0));  // Inicializo los números aleatorios

    vector<Jugador> jugadores;
    // Agrego los jugadores con sus ELOs
    jugadores.push_back(Jugador("Magnus Carlsen", 2852));
    jugadores.push_back(Jugador("Ian Nepomniachtchi", 2793));
    jugadores.push_back(Jugador("Ding Liren", 2811));
    jugadores.push_back(Jugador("Fabiano Caruana", 2786));
    jugadores.push_back(Jugador("Anish Giri", 2779));
    jugadores.push_back(Jugador("Levon Aronian", 2775));
    jugadores.push_back(Jugador("Hikaru Nakamura", 2768));
    jugadores.push_back(Jugador("Wesley So", 2766));
    jugadores.push_back(Jugador("Maxime Vachier-Lagrave", 2764));
    jugadores.push_back(Jugador("Shakhriyar Mamedyarov", 2763));
    jugadores.push_back(Jugador("Teimour Radjabov", 2765));
    jugadores.push_back(Jugador("Sergey Karjakin", 2758));
    jugadores.push_back(Jugador("Vladimir Kramnik", 2753));
    jugadores.push_back(Jugador("Veselin Topalov", 2750));
    jugadores.push_back(Jugador("Viswanathan Anand", 2749));

    ArbolBST arbolJugadores;

    // Uso un bucle tradicional para insertar cada jugador en el árbol
    for (size_t i = 0; i < jugadores.size(); ++i) {
        arbolJugadores.insertarJugador(jugadores[i]);  // Inserto cada jugador en el árbol
    }

    int opcion_1;
    bool bucle_1 = false;

    cout << "------------------------------------------" << endl;
    cout << "          Bienvenido al dojo de Ajedrez   " << endl;
    cout << "------------------------------------------" << endl;

    while (!bucle_1) {
        // Menú principal con las opciones
        cout << "\nEscoge tu destino: \n" 
             << "1. Ver jugadores \n"
             << "2. Hacer torneo \n"
             << "3. Agregar jugador \n"
             << "4. Buscar jugador por ELO \n"  // Nueva opción para buscar
             << "5. Salir del dojo" << endl;
        cout << "\nIngresa opcion: ";  // Pido la opción al usuario
        cin >> opcion_1;
        cout << endl;  // Añadir salto de línea para espaciar la salida siguiente

        if (opcion_1 == 1) {
            // Imprimo la lista de jugadores antes del torneo
            cout << "Lista de jugadores y su ELO antes del torneo:\n" << endl;
            imprimirJugadores(jugadores);

        } else if (opcion_1 == 2) {
            // Inicio la simulación del torneo
            cout << "\nIniciando el torneo...\n";
            simularTorneo(jugadores);  // Simulo el torneo y muestro los resultados

            // Muestro la lista ordenada con la posición después del torneo
            cout << "\nLista de jugadores y su ELO después del torneo (ordenada):\n";
            for (size_t i = 0; i < jugadores.size(); ++i) {
                cout << (i + 1) << "- " << jugadores[i].nombre << " - ELO: " << jugadores[i].elo << endl;
            }

        } else if (opcion_1 == 3) {
            string nuevo_nombre;
            int nuevo_elo;

            // Pido los datos para agregar un nuevo jugador
            cout << "Ingresa el nombre del nuevo jugador: ";
            cin.ignore();
            getline(cin, nuevo_nombre);
            cout << "Ingresa el ELO del nuevo jugador: ";
            cin >> nuevo_elo;

            jugadores.push_back(Jugador(nuevo_nombre, nuevo_elo));
            arbolJugadores.insertarJugador(Jugador(nuevo_nombre, nuevo_elo));  // Inserto también en el árbol
            cout << "\nJugador agregado exitosamente.\n" << endl;

        } else if (opcion_1 == 4) {
            // Busco un jugador por su ELO en el árbol
            int elo_buscar;
            cout << "Ingresa el ELO del jugador a buscar: ";
            cin >> elo_buscar;

            Jugador* encontrado = arbolJugadores.buscarJugadorPorELO(elo_buscar);  // Busco en el árbol
            if (encontrado) {
                // Si lo encuentro, muestro los datos del jugador
                cout << "Jugador encontrado: " << encontrado->nombre << " - ELO: " << encontrado->elo << endl;
            } else {
                // Si no lo encuentro, informo al usuario
                cout << "No se encontro un jugador con ese ELO.\n" << endl;
            }

        } else if (opcion_1 == 5) {
            // Salgo del programa
            cout << "Saliendo del dojo..." << endl;
            bucle_1 = true;
        } else {
            // En caso de una opción no válida
            cout << "La opción no está disponible. Intenta de nuevo." << endl;
        }

        cout << "\n------------------------------------------" << endl;  // Separador entre las opciones
    }

    return 0;
}
